{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAIA,SAASC,EAAcC,EAAUC,EAAOC,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLJ,EACFE,EAAQ,CAAEJ,WAAUC,UAEpBI,EAAO,CAAEL,WAAUC,S,GAEpBA,E,IAVMM,SAASC,cAAc,SAc/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAEN,IAAgCC,EAAAF,EAAMG,OAAOC,SAArCC,EAAwBH,EAAxBX,MAAOe,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACfC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,QAE1BF,EAAa,GAAKG,EAAY,GAAKJ,EAAOG,MAAQ,IACpDvB,EAAAyB,OAAOC,QAAS,qCAIlB,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,GAAKR,EAAOG,MAAOK,GAAK,EAAG,CACzC,IAAMvB,EAAgBwB,KAAKC,SAAW,GACtCH,EAASI,KAAK7B,EAAc0B,EAAGP,EAAYhB,G,CAG7CC,QAAQ0B,IAAIL,GACTM,MAAK,SAAAC,GACJA,EAAQC,SAAQ,SAAAC,G,IAAGjC,EAAQiC,EAARjC,SAAUC,EAAKgC,EAALhC,MAC3BJ,EAAAyB,OAAOY,QAAQ,qBAAoCC,OAAfnC,EAAS,QAAYmC,OAANlC,EAAM,M,OAG5DmC,OAAM,SAAAL,GACLA,EAAQC,SAAQ,SAAAC,G,IAAGjC,EAAQiC,EAARjC,SAAUC,EAAKgC,EAALhC,MAC3BJ,EAAAyB,OAAOC,QAAQ,oBAAmCY,OAAfnC,EAAS,QAAYmC,OAANlC,EAAM,M,OAI9DS,EAAM2B,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay, shouldResolve) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.target.elements;\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n\n  if (delayValue < 1 || stepValue < 1 || amount.value < 1) {\n    Notify.failure(`All fields must be more than zero`);\n  }\n\n  const promises = [];\n  for (let i = 1; i <= amount.value; i += 1) {\n    const shouldResolve = Math.random() > 0.3;\n    promises.push(createPromise(i, delayValue, shouldResolve));\n  }\n\n  Promise.all(promises)\n    .then(results => {\n      results.forEach(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      });\n    })\n    .catch(results => {\n      results.forEach(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    });\n\n  event.currentTarget.reset();\n}\n\n// let timeId = null;\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   return new Promise((resolve, reject) => {\n//     timeId = setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// form.addEventListener('submit', onFormSubmit);\n\n// function onFormSubmit(event) {\n//   event.preventDefault();\n//   clearTimeout(timeId);\n\n//   const { delay, step, amount } = event.target.elements;\n//   let stepValue = Number(delay.value);\n\n//   if (delay.value < 1 || step.value < 1 || amount.value < 1) {\n//     Notify.failure(`All fields must be more than zero`);\n//     return;\n//   }\n\n//   for (let i = 1; (i += amount.value); i += 1) {\n//     createPromise(i, stepValue)\n//       .then(({ position, delay }) => {\n//         Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n//       });\n//     stepValue += Number(step.value);\n//   }\n\n//   event.currentTarget.reset();\n// }\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","_elements","target","elements","delay1","step","amount","delayValue","Number","value","stepValue","Notify","failure","promises","i","Math","random","push","all","then","results","forEach","param","success","concat","catch","currentTarget","reset"],"version":3,"file":"03-promises.beaffd44.js.map"}